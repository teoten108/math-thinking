#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate 
#+TITLE:    MATHEMATICAL THINKING
#+AUTHOR:    teoten
#+EMAIL:     teoten@gmail.com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+BABEL: header-args :exports both

* Darts

Simulates the randon throw of a dart. It can land anywhere in the 
square (uniformly randomly).

In R

#+BEGIN_SRC R :results output :exports both
  source('darts.R')

  throw.dart()

  system.time({
      for (i in 1:100000){
          throw.dart()
      }
  })  
#+END_SRC

#+RESULTS:
: [1]  0.5070483 -0.1376662
:    user  system elapsed 
:   1.155   0.060   1.217 

In python

#+BEGIN_SRC python :session :results code :exports both
import darts as d
import timeit

d.throw_dart()


#print(timeit.timeit(throw_dart, number = 100000))
#+END_SRC

#+RESULTS:
: 0.1471399299944285

Common Lisp

#+BEGIN_SRC lisp :session :results code :exports both
  (load "darts.lisp")

  (time (throw-dart))

  (time (loop repeat 100000 do (throw-dart)))
#+END_SRC

#+RESULTS:
: Evaluation took:
:  0.009 seconds of real time
:  0.009334 seconds of total run time (0.009334 user, 0.000000 system)
:  100.00% CPU
:  17,408,020 processor cycles
:  3,211,264 bytes consed

 CL is clearly the fastest

ob-julia not working

#+BEGIN_SRC julia :results none :exports code :eval never-export
  @time for i in 1:100000
      throw_dart()
  end

  julia>   0.023551 seconds (100.02 k allocations: 9.175 MiB)
#+END_SRC

